@page "/"
@using TicketMaster.Components.Models
@using TicketMaster.Services
@inject ITicketmasterService TicketmasterService
@inject NavigationManager NavigationManager

<h1>Search Attractions</h1>

<div class="mb-3 d-flex gap-2">
    <input class="form-control mb-2"
           placeholder="Enter a keyword"
           @bind="keyword"
           @bind:event="oninput"
           @onkeypress="HandleKeyPress"
           style="padding: 6px; flex: 1; height: 40px;" />
           
    <button class="btn btn-primary"
            style="padding: 6px 12px; height: 40px;"
            @onclick="SearchForAttractions">
        Search
    </button>
</div>

@if (attractions == null)
{

}
else if (attractions.Count == 0 && isSearched)
{
    <div class="d-flex justify-content-center">
        <img src="images/not_found_frame_33408.svg" alt="Results Not Found" />
    </div>
}
else if (attractions.Count > 0)
{
    <div>
        @foreach (var attraction in attractions)
        {
            var name = attraction.Name;
            var imageUrl = attraction.Images?.FirstOrDefault()?.Url ?? "images/default-image.jpg";

            <div class="d-flex align-items-center border p-2 mb-2 selectable-item"
                 @onclick="@(() => SelectAttraction(name))"
                 style="cursor: pointer;
                        background-color: @(selectedAttractionName == name ? "#d0ebff" : "white");
                        border-color: @(selectedAttractionName == name ? "#74c0fc" : "#dee2e6");">
                <img src="@imageUrl" alt="@name" width="100" class="me-3" style="object-fit: cover;" />
                <h5>@name</h5>
            </div>
        }

        @if (!string.IsNullOrEmpty(selectedAttractionName))
        {
            <div style="position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); z-index: 1000;">
                <button class="btn btn-primary shadow-lg" @onclick="NavigateToSelected">
                    Select
                </button>
            </div>
        }
    </div>

    <br />
    <br />
    <br />
}

@code {
    private string keyword = "Phish"; 
    private List<Attraction> attractions;
    private string selectedAttractionName;
    private bool isSearched = false; 

    private async Task SearchForAttractions()
    {
        try
        {
            attractions = await TicketmasterService.SearchAttractionsAsync(keyword);
            selectedAttractionName = null;
            isSearched = true; 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching attractions: {ex.Message}");
            attractions = new List<Attraction>();
            isSearched = true;
        }
    }

    private void SelectAttraction(string name)
    {
        selectedAttractionName = name;
    }

    private void NavigateToSelected()
    {
        if (!string.IsNullOrEmpty(selectedAttractionName))
        {
            var encodedName = Uri.EscapeDataString(selectedAttractionName);
            NavigationManager.NavigateTo($"/events/{encodedName}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") 
        {
            await SearchForAttractions();
        }
    }
}
